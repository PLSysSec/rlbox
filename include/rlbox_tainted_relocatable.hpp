#pragma once

/**
 * @file rlbox_tainted_relocatable.hpp
 * @brief This header implements the tainted_relocatable class.
 */

// IWYU incorrectly reports this as unnecessary as the use of type_traits is in
// a templated class
#include <type_traits> // IWYU pragma: keep

#include "rlbox_common_error_strings.hpp"
#include "rlbox_tainted_base.hpp"
#include "rlbox_tainted_fixed_aligned.hpp"

namespace rlbox {
/**
 * @brief Implementation of tainted data wrappers that supports the movement of
 * the sandbox heap after creation.
 *
 * @note This implementatation handles only non-class/non-struct and non-pointer
 * T types and its behavior is identical to tainted_fixed_aligned.
 * Specializations of this class are generated by the rlbox_lib_load_classes
 * when T is a class/struct.
 *
 * @tparam T is the type of the data being wrapped.
 * @tparam TSbx is the type of the sandbox plugin that represents the underlying
 * sandbox implementation.
 */
template<typename T, typename TSbx>
class tainted_relocatable : public tainted_fixed_aligned<T, TSbx>
{
  static_assert(
    !std::is_pointer_v<T>,
    "Unexpectedly received a pointer type in non-pointer "
    "specialization of tainted_relocatable. " RLBOX_FILE_BUG_MESSAGE);
};

/**
 * @brief Implementation of tainted data wrappers that supports the movement of
 * the sandbox heap after creation.
 *
 * @details If the tainted data is a pointer type, the value is stored as a
 * relative offset from the heap base. The offset is added to the heap base
 * when the pointer is accessed.
 *
 * @note This implementatation handles only pointer T types.
 *
 * @tparam T is the type of the data being wrapped.
 * @tparam TSbx is the type of the sandbox plugin that represents the underlying
 * sandbox implementation.
 */
template<typename T, typename TSbx>
class tainted_relocatable<T*, TSbx> : public tainted_primitive_base<T*, TSbx>
{};

}
