<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classrlbox_1_1rlbox__sandbox" kind="class" language="C++" prot="public">
    <compoundname>rlbox::rlbox_sandbox</compoundname>
    <basecompoundref prot="protected" virt="non-virtual">T_Sbx</basecompoundref>
    <includes refid="rlbox__sandbox_8hpp" local="no">rlbox_sandbox.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T_Sbx</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72c" prot="private" static="no" strong="yes">
        <type></type>
        <name>Sandbox_Status</name>
        <enumvalue id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72ca2187e848d98cc04d522fc140d2d0d4a0" prot="private">
          <name>NOT_CREATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72ca86bf8c89d85949f8f45cde2f73fce113" prot="private">
          <name>INITIALIZING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72ca98690bf632c29c17c9e4c5a64069903c" prot="private">
          <name>CREATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72ca60a404d7387c1de8c46e179446aa6536" prot="private">
          <name>CLEANING_UP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="122" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="123" bodyend="128"/>
      </memberdef>
      <memberdef kind="typedef" id="classrlbox_1_1rlbox__sandbox_1ab60c066739f933ed94116fcb39a28508" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(::rlbox::convert_fn_ptr_to_sandbox_equivalent_detail::helper&lt; T_Sbx &gt;(std::declval&lt; T &gt;()))</type>
        <definition>using rlbox::rlbox_sandbox&lt; T_Sbx &gt;::convert_fn_ptr_to_sandbox_equivalent_t =  decltype(::rlbox::convert_fn_ptr_to_sandbox_equivalent_detail::helper&lt; T_Sbx&gt;(std::declval&lt;T&gt;()))</definition>
        <argsstring></argsstring>
        <name>convert_fn_ptr_to_sandbox_equivalent_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="137" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classrlbox_1_1rlbox__sandbox_1a2236c8f780e2fbb505b616a05d632298" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>detail::convert_base_types_t&lt; T, typename T_Sbx::T_ShortType, typename T_Sbx::T_IntType, typename T_Sbx::T_LongType, typename T_Sbx::T_LongLongType, typename T_Sbx::T_PointerType &gt;</type>
        <definition>using rlbox::rlbox_sandbox&lt; T_Sbx &gt;::convert_to_sandbox_equivalent_nonclass_t =  detail::convert_base_types_t&lt;T, typename T_Sbx::T_ShortType, typename T_Sbx::T_IntType, typename T_Sbx::T_LongType, typename T_Sbx::T_LongLongType, typename T_Sbx::T_PointerType&gt;</definition>
        <argsstring></argsstring>
        <name>convert_to_sandbox_equivalent_nonclass_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="352" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrlbox_1_1rlbox__sandbox_1a09c972acd976ab264478c3abd32f8383" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T_Ret</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>detail::rlbox_remove_wrapper_t&lt; T_Ret &gt;(detail::rlbox_remove_wrapper_t&lt; T_Args &gt;...)</type>
        <definition>using rlbox::rlbox_sandbox&lt; T_Sbx &gt;::T_Cb_no_wrap =  detail::rlbox_remove_wrapper_t&lt;T_Ret&gt;( detail::rlbox_remove_wrapper_t&lt;T_Args&gt;...)</definition>
        <argsstring></argsstring>
        <name>T_Cb_no_wrap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="811" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="812" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1a30c1d4dbbdf0b3d7703964d7f0132466" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; void * &gt;</type>
        <definition>std::vector&lt;void*&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_list</definition>
        <argsstring></argsstring>
        <name>sandbox_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="107" column="29" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1a2518efbb4e7c12d050fa555f121ee165" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, void * &gt;</type>
        <definition>std::map&lt;std::string, void*&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::func_ptr_map</definition>
        <argsstring></argsstring>
        <name>func_ptr_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="110" column="12" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1abcbeeb2614b6b5b59f34d6237eb4c9ba" prot="private" static="no" mutable="no">
        <type><ref refid="classrlbox_1_1app__pointer__map" kindref="compound">app_pointer_map</ref>&lt; typename T_Sbx::T_PointerType &gt;</type>
        <definition>app_pointer_map&lt;typename T_Sbx::T_PointerType&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::app_ptr_map</definition>
        <argsstring></argsstring>
        <name>app_ptr_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="112" column="19" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1ae9542cd3cc19b7655958aa4332adbe60" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; Sandbox_Status &gt;</type>
        <definition>std::atomic&lt;Sandbox_Status&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_created</definition>
        <argsstring></argsstring>
        <name>sandbox_created</name>
        <initializer>= Sandbox_Status::NOT_CREATED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="129" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1a08803ef5d6b029a8b31c34df70322f51" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rlbox::rlbox_sandbox&lt; T_Sbx &gt;::callback_lock</definition>
        <argsstring></argsstring>
        <name>callback_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="131" column="14" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1ae65aee474d232b3737e07638df545f3d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; void * &gt;</type>
        <definition>std::vector&lt;void*&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::callback_keys</definition>
        <argsstring></argsstring>
        <name>callback_keys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="132" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1a39e5c9efa16d8612ee8c7f1f533f3d06" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* rlbox::rlbox_sandbox&lt; T_Sbx &gt;::transition_state</definition>
        <argsstring></argsstring>
        <name>transition_state</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="134" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1a61db4d3c217ee7acbc40e0bab23449e8" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_storage</definition>
        <argsstring></argsstring>
        <name>sandbox_storage</name>
        <briefdescription>
<para>Unused member that allows the calling code to save data in a &quot;per-sandbox&quot; storage. This can be useful to save context which is used in callbacks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="347" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="347" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ae66207864d8c2bc0882cfa9fbf473d99" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>static</type>
        <definition>static rlbox::rlbox_sandbox&lt; T_Sbx &gt;::RLBOX_SHARED_LOCK</definition>
        <argsstring>(sandbox_list_lock)</argsstring>
        <name>RLBOX_SHARED_LOCK</name>
        <param>
          <type>sandbox_list_lock</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="103" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1aad97121a2d00a82b3b0413e961df372d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Ret</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>detail::convert_to_sandbox_equivalent_t&lt; T_Ret, T_Sbx &gt;</type>
        <definition>static detail::convert_to_sandbox_equivalent_t&lt; T_Ret, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_callback_interceptor</definition>
        <argsstring>(detail::convert_to_sandbox_equivalent_t&lt; T_Args, T_Sbx &gt;... args)</argsstring>
        <name>sandbox_callback_interceptor</name>
        <param>
          <type>detail::convert_to_sandbox_equivalent_t&lt; T_Args, T_Sbx &gt;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="229" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="229" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a526e13ca0cec25d894a7c2b94efd237d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T_Sbx *</type>
        <definition>static T_Sbx * rlbox::rlbox_sandbox&lt; T_Sbx &gt;::find_sandbox_from_example</definition>
        <argsstring>(const void *example_sandbox_ptr)</argsstring>
        <name>find_sandbox_from_example</name>
        <param>
          <type>const void *</type>
          <declname>example_sandbox_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="319" column="16" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="319" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a63014a040b24cc6989300a1ea98fe5ec" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::impl_create_sandbox_helper</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; *this_ptr, T_Args... args)</argsstring>
        <name>impl_create_sandbox_helper</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; *</type>
          <declname>this_ptr</declname>
        </param>
        <param>
          <type>T_Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="337" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="337" bodyend="339"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a5c74b2ca8125342e07bd329fa51bbd09" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::rlbox_sandbox&lt; T_Sbx &gt;::RLBOX_SHARED_LOCK</definition>
        <argsstring>(func_ptr_cache_lock)</argsstring>
        <name>RLBOX_SHARED_LOCK</name>
        <param>
          <type>func_ptr_cache_lock</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="109" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a29b5ec5468651f2ac34eb5107163b93b" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void rlbox::rlbox_sandbox&lt; T_Sbx &gt;::check_invoke_param_type_is_ok</definition>
        <argsstring>()</argsstring>
        <name>check_invoke_param_type_is_ok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="142" column="25" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="142" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a9d7fe6306db467d3949862346084aeed" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::invoke_process_param</definition>
        <argsstring>(T &amp;&amp;param)</argsstring>
        <name>invoke_process_param</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="183" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="183" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1aac126744f903df631c91f04b87351ffb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename T_Arg</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T, T_Sbx &gt;</type>
        <definition>tainted&lt; T, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_callback_intercept_convert_param</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox, const T_Arg &amp;arg)</argsstring>
        <name>sandbox_callback_intercept_convert_param</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <param>
          <type>const T_Arg &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="211" column="18" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="211" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1abded0a7d6c2b1c5505be3d0c87817c96" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Ret</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlbox::rlbox_sandbox&lt; T_Sbx &gt;::unregister_callback</definition>
        <argsstring>(void *key)</argsstring>
        <name>unregister_callback</name>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Unregister a callback function and disallow the sandbox from calling this function henceforth. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="299" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="299" bodyend="317"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a66afca7d0ad22bb60fcbab83a8ccb441" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T_Sbx *</type>
        <definition>T_Sbx * rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_sandbox_impl</definition>
        <argsstring>()</argsstring>
        <name>get_sandbox_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="360" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="360" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a8d10eac11ee829943be5aa3bb8f43137" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool rlbox::rlbox_sandbox&lt; T_Sbx &gt;::create_sandbox</definition>
        <argsstring>(T_Args... args)</argsstring>
        <name>create_sandbox</name>
        <param>
          <type>T_Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new sandbox. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments passed to the underlying sandbox implementation. For the null sandbox, no arguments are necessary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="369" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="369" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ac2be161ed2183fa8bc319232a8d74da6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::destroy_sandbox</definition>
        <argsstring>()</argsstring>
        <name>destroy_sandbox</name>
        <briefdescription>
<para>Destroy sandbox and reclaim any memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="413" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="413" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a4776bcab38dc24395657d2c437e36fc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_unsandboxed_pointer</definition>
        <argsstring>(convert_to_sandbox_equivalent_nonclass_t&lt; T &gt; p) const</argsstring>
        <name>get_unsandboxed_pointer</name>
        <param>
          <type>convert_to_sandbox_equivalent_nonclass_t&lt; T &gt;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="438" column="12" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="438" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1aa9aba50a34f0e820947e1acf88a794ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>convert_to_sandbox_equivalent_nonclass_t&lt; T &gt;</type>
        <definition>convert_to_sandbox_equivalent_nonclass_t&lt; T &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_sandboxed_pointer</definition>
        <argsstring>(const void *p) const</argsstring>
        <name>get_sandboxed_pointer</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="450" column="51" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="450" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a8ba59f981ba2b463e8e3629b22cc3bee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt; T *, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::malloc_in_sandbox</definition>
        <argsstring>()</argsstring>
        <name>malloc_in_sandbox</name>
        <briefdescription>
<para>Allocate a new pointer that is accessible to both the application and sandbox. The pointer is allocated in sandbox memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the pointer you want to create. If T=int, this would return a pointer to an int.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tainted&lt;T*, T_Sbx&gt; Tainted pointer accessible to the application and sandbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="498" column="18" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="498" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a5f7bca36b7a7a8df4c9212ceff78d5be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt; T *, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::malloc_in_sandbox</definition>
        <argsstring>(uint32_t count)</argsstring>
        <name>malloc_in_sandbox</name>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Allocate an array that is accessible to both the application and sandbox. The pointer is allocated in sandbox memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the array elements you want to create. If T=int, this would return a pointer to an array of ints.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of array elements to allocate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tainted&lt;T*, T_Sbx&gt; Tainted pointer accessible to the application and sandbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="517" column="18" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="517" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a775b1828f996dc8f14f24a296096e0e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlbox::rlbox_sandbox&lt; T_Sbx &gt;::free_in_sandbox</definition>
        <argsstring>(tainted&lt; T *, T_Sbx &gt; ptr)</argsstring>
        <name>free_in_sandbox</name>
        <param>
          <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free the memory referenced by the tainted pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sandbox memory to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="565" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="565" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ad26f351fa58e8fa013e79afb996dc807" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlbox::rlbox_sandbox&lt; T_Sbx &gt;::free_in_sandbox</definition>
        <argsstring>(tainted_volatile&lt; T, T_Sbx &gt; &amp;ptr_ref)</argsstring>
        <name>free_in_sandbox</name>
        <param>
          <type><ref refid="classrlbox_1_1tainted__volatile" kindref="compound">tainted_volatile</ref>&lt; T, T_Sbx &gt; &amp;</type>
          <declname>ptr_ref</declname>
        </param>
        <briefdescription>
<para>Free the memory referenced by a <ref refid="classrlbox_1_1tainted__volatile" kindref="compound">tainted_volatile</ref> pointer ref. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer reference to sandbox memory to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="582" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="582" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a75636dbe30d516a71f13841a4a64a854" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlbox::rlbox_sandbox&lt; T_Sbx &gt;::free_in_sandbox</definition>
        <argsstring>(tainted_opaque&lt; T, T_Sbx &gt; ptr_opaque)</argsstring>
        <name>free_in_sandbox</name>
        <param>
          <type><ref refid="classrlbox_1_1tainted__opaque" kindref="compound">tainted_opaque</ref>&lt; T, T_Sbx &gt;</type>
          <declname>ptr_opaque</declname>
        </param>
        <briefdescription>
<para>Free the memory referenced by a <ref refid="classrlbox_1_1tainted__opaque" kindref="compound">tainted_opaque</ref> pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr_opaque</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to sandbox memory to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="594" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="594" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a55e48f0300c16d36ea7ed5a7e4750f64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rlbox::rlbox_sandbox&lt; T_Sbx &gt;::is_pointer_in_sandbox_memory</definition>
        <argsstring>(const void *p)</argsstring>
        <name>is_pointer_in_sandbox_memory</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Check if the pointer points to this sandbox&apos;s memory. For the null-sandbox, this always returns true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="619" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="619" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1afc6c3f229b2807517c54cc120dfda941" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rlbox::rlbox_sandbox&lt; T_Sbx &gt;::is_pointer_in_app_memory</definition>
        <argsstring>(const void *p)</argsstring>
        <name>is_pointer_in_app_memory</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Check if the pointer points to application memory. For the null-sandbox, this always returns true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="628" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="628" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a9bfda00c80c73e70ddbc3f2419066cb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_total_memory</definition>
        <argsstring>()</argsstring>
        <name>get_total_memory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="633" column="17" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="633" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a03e8b976c7e362bfa395824928044462" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_memory_location</definition>
        <argsstring>()</argsstring>
        <name>get_memory_location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="635" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="635" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a4f3947f51ee6b01061ecaee1600c6485" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_transition_state</definition>
        <argsstring>()</argsstring>
        <name>get_transition_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="640" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="640" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a96d6a841818c4342bb905670cfc3ca11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rlbox::rlbox_sandbox&lt; T_Sbx &gt;::set_transition_state</definition>
        <argsstring>(void *new_state)</argsstring>
        <name>set_transition_state</name>
        <param>
          <type>void *</type>
          <declname>new_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="642" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="642" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1aea91172b5bbf836eb7bb3855a215815d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt; T *, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_grant_access</definition>
        <argsstring>(T *src, size_t num, bool &amp;success)</argsstring>
        <name>INTERNAL_grant_access</name>
        <param>
          <type>T *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>For internal use only. Grant access of the passed in buffer in to the sandbox instance. Called by internal APIs only if the underlying sandbox supports can_grant_deny_access by including the line. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>can_grant_deny_access<sp/>=<sp/>void;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="654" column="18" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="654" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1af9f02cae38115c7d4228ec2578b90190" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_deny_access</definition>
        <argsstring>(tainted&lt; T *, T_Sbx &gt; src, size_t num, bool &amp;success)</argsstring>
        <name>INTERNAL_deny_access</name>
        <param>
          <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>For internal use only. Grant access of the passed in buffer in to the sandbox instance. Called by internal APIs only if the underlying sandbox supports can_grant_deny_access by including the line. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>can_grant_deny_access<sp/>=<sp/>void;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="672" column="12" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="672" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ad615e011318db15848ed31491ef6d5ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * rlbox::rlbox_sandbox&lt; T_Sbx &gt;::lookup_symbol</definition>
        <argsstring>(const char *func_name)</argsstring>
        <name>lookup_symbol</name>
        <param>
          <type>const char *</type>
          <declname>func_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="681" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="681" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a5344396d4833c536b0ee9da715ace8d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * rlbox::rlbox_sandbox&lt; T_Sbx &gt;::internal_lookup_symbol</definition>
        <argsstring>(const char *func_name)</argsstring>
        <name>internal_lookup_symbol</name>
        <param>
          <type>const char *</type>
          <declname>func_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="698" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="698" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a9f9e13680f09205f25a520fc04ef3f9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_invoke_with_func_name</definition>
        <argsstring>(const char *func_name, T_Args &amp;&amp;... params)</argsstring>
        <name>INTERNAL_invoke_with_func_name</name>
        <param>
          <type>const char *</type>
          <declname>func_name</declname>
        </param>
        <param>
          <type>T_Args &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="722" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="722" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a5eacf092a66c9d4f850b726ffdcd9926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_invoke_with_func_ptr</definition>
        <argsstring>(const char *func_name, void *func_ptr, T_Args &amp;&amp;... params)</argsstring>
        <name>INTERNAL_invoke_with_func_ptr</name>
        <param>
          <type>const char *</type>
          <declname>func_name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>func_ptr</declname>
        </param>
        <param>
          <type>T_Args &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="735" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="735" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a3a16edd7c2356c246b3fde0134aa5a3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T2, T_Sbx &gt;</type>
        <definition>tainted&lt; T2, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::UNSAFE_accept_pointer</definition>
        <argsstring>(T2 ptr)</argsstring>
        <name>UNSAFE_accept_pointer</name>
        <param>
          <type>T2</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="801" column="11" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="801" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a520ad6614a956fa59cdb7a891d0d9d4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Ret</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1sandbox__callback" kindref="compound">sandbox_callback</ref>&lt; T_Cb_no_wrap&lt; T_Ret &gt; *, T_Sbx &gt;</type>
        <definition>sandbox_callback&lt; T_Cb_no_wrap&lt; T_Ret &gt; *, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::register_callback</definition>
        <argsstring>(T_Ret(*)())</argsstring>
        <name>register_callback</name>
        <param>
          <type>T_Ret(*)()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="815" column="20" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="815" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a86e4a01fbf229b2df531bc6f1b90f99a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_RL</type>
          </param>
          <param>
            <type>typename T_Ret</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1sandbox__callback" kindref="compound">sandbox_callback</ref>&lt; T_Cb_no_wrap&lt; T_Ret, T_Args... &gt; *, T_Sbx &gt;</type>
        <definition>sandbox_callback&lt; T_Cb_no_wrap&lt; T_Ret, T_Args... &gt; *, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::register_callback</definition>
        <argsstring>(T_Ret(*func_ptr)(T_RL, T_Args...))</argsstring>
        <name>register_callback</name>
        <param>
          <type>T_Ret(*)(T_RL, T_Args...)</type>
          <declname>func_ptr</declname>
        </param>
        <briefdescription>
<para>Expose a callback function to the sandboxed code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback to expose.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_RL</parametername>
</parameternamelist>
<parameterdescription>
<para>Sandbox reference type (first argument). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_Ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Return type of callback. Must be tainted or void. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of remaining callback arguments. Must be tainted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Wrapped callback function pointer that can be passed to the sandbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="842" column="20" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="842" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a103beadbcd79b169b408544e50801081" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt; T *, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_get_sandbox_function_name</definition>
        <argsstring>(const char *func_name)</argsstring>
        <name>INTERNAL_get_sandbox_function_name</name>
        <param>
          <type>const char *</type>
          <declname>func_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="949" column="18" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="949" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a8f96f126eaf486185c1c956343d1afde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt; T *, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_get_sandbox_function_ptr</definition>
        <argsstring>(void *func_ptr)</argsstring>
        <name>INTERNAL_get_sandbox_function_ptr</name>
        <param>
          <type>void *</type>
          <declname>func_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="957" column="18" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="957" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ac991e7a1ec63c27ceb8b954b1d9624ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1app__pointer" kindref="compound">app_pointer</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>app_pointer&lt; T *, T_Sbx &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_app_pointer</definition>
        <argsstring>(T *ptr)</argsstring>
        <name>get_app_pointer</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Create a &quot;fake&quot; pointer referring to a location in the application memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to refer to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classrlbox_1_1app__pointer" kindref="compound">app_pointer</ref> object that refers to this location. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="971" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="971" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a19c3b6ce3ddb0736ccb6d5fbfeb4a82e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * rlbox::rlbox_sandbox&lt; T_Sbx &gt;::lookup_app_ptr</definition>
        <argsstring>(tainted&lt; T *, T_Sbx &gt; tainted_ptr)</argsstring>
        <name>lookup_app_ptr</name>
        <param>
          <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
          <declname>tainted_ptr</declname>
        </param>
        <briefdescription>
<para>The mirror of get_app_pointer. Take a tainted pointer which is actually an <ref refid="classrlbox_1_1app__pointer" kindref="compound">app_pointer</ref>, and get the application location being pointed to. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tainted_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The tainted pointer that is actually an <ref refid="classrlbox_1_1app__pointer" kindref="compound">app_pointer</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The original location being referred to by the app_ptr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="998" column="5" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="998" bodyend="1003"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a030d5e296cdeb24cd4ca99a5cbe0ea39" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_unsandboxed_pointer_no_ctx</definition>
        <argsstring>(convert_to_sandbox_equivalent_nonclass_t&lt; T &gt; p, const void *example_unsandboxed_ptr)</argsstring>
        <name>get_unsandboxed_pointer_no_ctx</name>
        <param>
          <type>convert_to_sandbox_equivalent_nonclass_t&lt; T &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>example_unsandboxed_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="461" column="19" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="461" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a14c4e3b3460231078d820c71248bb6a6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>convert_to_sandbox_equivalent_nonclass_t&lt; T &gt;</type>
        <definition>static convert_to_sandbox_equivalent_nonclass_t&lt; T &gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_sandboxed_pointer_no_ctx</definition>
        <argsstring>(const void *p, const void *example_unsandboxed_ptr)</argsstring>
        <name>get_sandboxed_pointer_no_ctx</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>example_unsandboxed_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="476" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="476" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a3257ffc0e7eb6022c05a049b8b36271f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rlbox::rlbox_sandbox&lt; T_Sbx &gt;::is_in_same_sandbox</definition>
        <argsstring>(const void *p1, const void *p2)</argsstring>
        <name>is_in_same_sandbox</name>
        <param>
          <type>const void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Check if two pointers are in the same sandbox. For the null-sandbox, this always returns true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="604" column="22" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="604" bodyend="613"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Encapsulation for sandboxes. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Sbx</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of sandbox. For the null sandbox this is <computeroutput><ref refid="classrlbox_1_1rlbox__noop__sandbox" kindref="compound">rlbox_noop_sandbox</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>T_Sbx</label>
      </node>
      <node id="1">
        <label>rlbox::rlbox_sandbox&lt; T_Sbx &gt;</label>
        <link refid="classrlbox_1_1rlbox__sandbox"/>
        <childnode refid="2" relation="protected-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>T_Sbx</label>
      </node>
      <node id="1">
        <label>rlbox::rlbox_sandbox&lt; T_Sbx &gt;</label>
        <link refid="classrlbox_1_1rlbox__sandbox"/>
        <childnode refid="2" relation="protected-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" line="94" column="1" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp" bodystart="95" bodyend="1025"/>
    <listofallmembers>
      <member refid="classrlbox_1_1rlbox__sandbox_1abcbeeb2614b6b5b59f34d6237eb4c9ba" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>app_ptr_map</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ae65aee474d232b3737e07638df545f3d" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>callback_keys</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a08803ef5d6b029a8b31c34df70322f51" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>callback_lock</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a29b5ec5468651f2ac34eb5107163b93b" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>check_invoke_param_type_is_ok</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ab60c066739f933ed94116fcb39a28508" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>convert_fn_ptr_to_sandbox_equivalent_t</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a2236c8f780e2fbb505b616a05d632298" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>convert_to_sandbox_equivalent_nonclass_t</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a8d10eac11ee829943be5aa3bb8f43137" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>create_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ac2be161ed2183fa8bc319232a8d74da6" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>destroy_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a526e13ca0cec25d894a7c2b94efd237d" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>find_sandbox_from_example</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a775b1828f996dc8f14f24a296096e0e3" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>free_in_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ad26f351fa58e8fa013e79afb996dc807" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>free_in_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a75636dbe30d516a71f13841a4a64a854" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>free_in_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a2518efbb4e7c12d050fa555f121ee165" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>func_ptr_map</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ac991e7a1ec63c27ceb8b954b1d9624ac" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_app_pointer</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a03e8b976c7e362bfa395824928044462" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_memory_location</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a66afca7d0ad22bb60fcbab83a8ccb441" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_sandbox_impl</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1aa9aba50a34f0e820947e1acf88a794ea" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_sandboxed_pointer</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a14c4e3b3460231078d820c71248bb6a6" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_sandboxed_pointer_no_ctx</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a9bfda00c80c73e70ddbc3f2419066cb8" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_total_memory</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a4f3947f51ee6b01061ecaee1600c6485" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_transition_state</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a4776bcab38dc24395657d2c437e36fc8" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_unsandboxed_pointer</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a030d5e296cdeb24cd4ca99a5cbe0ea39" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_unsandboxed_pointer_no_ctx</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a63014a040b24cc6989300a1ea98fe5ec" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>impl_create_sandbox_helper</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1af9f02cae38115c7d4228ec2578b90190" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_deny_access</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a103beadbcd79b169b408544e50801081" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_get_sandbox_function_name</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a8f96f126eaf486185c1c956343d1afde" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_get_sandbox_function_ptr</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1aea91172b5bbf836eb7bb3855a215815d" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_grant_access</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a9f9e13680f09205f25a520fc04ef3f9a" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_invoke_with_func_name</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a5eacf092a66c9d4f850b726ffdcd9926" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_invoke_with_func_ptr</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a5344396d4833c536b0ee9da715ace8d7" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>internal_lookup_symbol</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a9d7fe6306db467d3949862346084aeed" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>invoke_process_param</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a3257ffc0e7eb6022c05a049b8b36271f" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>is_in_same_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1afc6c3f229b2807517c54cc120dfda941" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>is_pointer_in_app_memory</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a55e48f0300c16d36ea7ed5a7e4750f64" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>is_pointer_in_sandbox_memory</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a19c3b6ce3ddb0736ccb6d5fbfeb4a82e" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>lookup_app_ptr</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ad615e011318db15848ed31491ef6d5ce" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>lookup_symbol</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a8ba59f981ba2b463e8e3629b22cc3bee" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>malloc_in_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a5f7bca36b7a7a8df4c9212ceff78d5be" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>malloc_in_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a520ad6614a956fa59cdb7a891d0d9d4e" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>register_callback</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a86e4a01fbf229b2df531bc6f1b90f99a" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>register_callback</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ae66207864d8c2bc0882cfa9fbf473d99" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>RLBOX_SHARED_LOCK</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a5c74b2ca8125342e07bd329fa51bbd09" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>RLBOX_SHARED_LOCK</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1aac126744f903df631c91f04b87351ffb" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_callback_intercept_convert_param</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1aad97121a2d00a82b3b0413e961df372d" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_callback_interceptor</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ae9542cd3cc19b7655958aa4332adbe60" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_created</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a30c1d4dbbdf0b3d7703964d7f0132466" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_list</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72c" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>Sandbox_Status</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a61db4d3c217ee7acbc40e0bab23449e8" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_storage</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a96d6a841818c4342bb905670cfc3ca11" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>set_transition_state</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a09c972acd976ab264478c3abd32f8383" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>T_Cb_no_wrap</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a39e5c9efa16d8612ee8c7f1f533f3d06" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>transition_state</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1abded0a7d6c2b1c5505be3d0c87817c96" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>unregister_callback</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a3a16edd7c2356c246b3fde0134aa5a3b" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>UNSAFE_accept_pointer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
