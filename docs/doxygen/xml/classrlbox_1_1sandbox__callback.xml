<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classrlbox_1_1sandbox__callback" kind="class" language="C++" prot="public">
    <compoundname>rlbox::sandbox_callback</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename T_Sbx</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classrlbox_1_1sandbox__callback_1acdf03310deac0be193c94186bfd2d989" prot="private" static="no">
        <type>decltype(callback_detail::callback_type_helper&lt; T_Sbx &gt;(std::declval&lt; T &gt;()))</type>
        <definition>using rlbox::sandbox_callback&lt; T, T_Sbx &gt;::T_Callback =  decltype(callback_detail::callback_type_helper&lt;T_Sbx&gt;(std::declval&lt;T&gt;()))</definition>
        <argsstring></argsstring>
        <name>T_Callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="43" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrlbox_1_1sandbox__callback_1aa0faf902a429a881919482e64842ba4f" prot="private" static="no">
        <type>decltype(callback_detail::interceptor_type_helper&lt; T_Sbx &gt;(std::declval&lt; T &gt;()))</type>
        <definition>using rlbox::sandbox_callback&lt; T, T_Sbx &gt;::T_Interceptor =  decltype(callback_detail::interceptor_type_helper&lt;T_Sbx&gt;( std::declval&lt;T&gt;()))</definition>
        <argsstring></argsstring>
        <name>T_Interceptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="51" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrlbox_1_1sandbox__callback_1a9e1e0dfdc9fbd1bfe4ad923349c713e8" prot="private" static="no">
        <type>detail::convert_to_sandbox_equivalent_t&lt; T, T_Sbx &gt;</type>
        <definition>using rlbox::sandbox_callback&lt; T, T_Sbx &gt;::T_Trampoline =  detail::convert_to_sandbox_equivalent_t&lt;T, T_Sbx&gt;</definition>
        <argsstring></argsstring>
        <name>T_Trampoline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="59" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrlbox_1_1sandbox__callback_1a5f90f6d66b8dad7a40394f5ff83f604a" prot="private" static="no" mutable="no">
        <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; *</type>
        <definition>rlbox_sandbox&lt;T_Sbx&gt;* rlbox::sandbox_callback&lt; T, T_Sbx &gt;::sandbox</definition>
        <argsstring></argsstring>
        <name>sandbox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="41" column="17" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1sandbox__callback_1a98c8667613c794661c7398a74a8ae0ce" prot="private" static="no" mutable="no">
        <type>T_Callback</type>
        <definition>T_Callback rlbox::sandbox_callback&lt; T, T_Sbx &gt;::callback</definition>
        <argsstring></argsstring>
        <name>callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="45" column="14" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1sandbox__callback_1a22ba7a273103adfdefa7aea31c5f79a8" prot="private" static="no" mutable="no">
        <type>T_Interceptor</type>
        <definition>T_Interceptor rlbox::sandbox_callback&lt; T, T_Sbx &gt;::callback_interceptor</definition>
        <argsstring></argsstring>
        <name>callback_interceptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="54" column="17" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1sandbox__callback_1a34399e7a42798f1d840e1dc466d5ef4e" prot="private" static="no" mutable="no">
        <type>T_Trampoline</type>
        <definition>T_Trampoline rlbox::sandbox_callback&lt; T, T_Sbx &gt;::callback_trampoline</definition>
        <argsstring></argsstring>
        <name>callback_trampoline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="60" column="16" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1sandbox__callback_1a4a49a8d63345764ddde4dc3c0552aef6" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* rlbox::sandbox_callback&lt; T, T_Sbx &gt;::key</definition>
        <argsstring></argsstring>
        <name>key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="64" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a848ba6767b7e3b7a4f4b1d5247801e89" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rlbox::sandbox_callback&lt; T, T_Sbx &gt;::move_obj</definition>
        <argsstring>(sandbox_callback &amp;&amp;other)</argsstring>
        <name>move_obj</name>
        <param>
          <type><ref refid="classrlbox_1_1sandbox__callback" kindref="compound">sandbox_callback</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="66" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="66" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a8070ea8fa083f2dcf1c84741d9373818" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Ret</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlbox::sandbox_callback&lt; T, T_Sbx &gt;::unregister_helper</definition>
        <argsstring>(T_Ret(*)(T_Args...))</argsstring>
        <name>unregister_helper</name>
        <param>
          <type>T_Ret(*)(T_Args...)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="81" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="81" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1ab5a304f02011f0a4385c149bc7619e54" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T_Callback</type>
        <definition>T_Callback rlbox::sandbox_callback&lt; T, T_Sbx &gt;::get_raw_value</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_raw_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="98" column="21" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a94693a8e6c2b78e7ef97dc7b75725dd0" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T_Trampoline</type>
        <definition>T_Trampoline rlbox::sandbox_callback&lt; T, T_Sbx &gt;::get_raw_sandbox_value</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_raw_sandbox_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="99" column="23" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a0ce763c5aa54385263a3f40055e3ef76" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T_Callback</type>
        <definition>T_Callback rlbox::sandbox_callback&lt; T, T_Sbx &gt;::get_raw_value</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_raw_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="103" column="21" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a72090fc430b1b20349a3b40437f73d4e" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T_Trampoline</type>
        <definition>T_Trampoline rlbox::sandbox_callback&lt; T, T_Sbx &gt;::get_raw_sandbox_value</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_raw_sandbox_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="104" column="23" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1ab6886f593df13c2aa282aff54c14b374" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rlbox::sandbox_callback&lt; T, T_Sbx &gt;::sandbox_callback</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; *p_sandbox, T_Callback p_callback, T_Interceptor p_callback_interceptor, T_Trampoline p_callback_trampoline, void *p_key)</argsstring>
        <name>sandbox_callback</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; *</type>
          <declname>p_sandbox</declname>
        </param>
        <param>
          <type>T_Callback</type>
          <declname>p_callback</declname>
        </param>
        <param>
          <type>T_Interceptor</type>
          <declname>p_callback_interceptor</declname>
        </param>
        <param>
          <type>T_Trampoline</type>
          <declname>p_callback_trampoline</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="111" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="111" bodyend="124"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1ad092fdea1356d88bfaaaa6721b91a765" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rlbox::sandbox_callback&lt; T, T_Sbx &gt;::sandbox_callback</definition>
        <argsstring>()</argsstring>
        <name>sandbox_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="127" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="127" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1af9453a813aa03d7b817b31f4ff82ce69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rlbox::sandbox_callback&lt; T, T_Sbx &gt;::sandbox_callback</definition>
        <argsstring>(sandbox_callback &amp;&amp;other)</argsstring>
        <name>sandbox_callback</name>
        <param>
          <type><ref refid="classrlbox_1_1sandbox__callback" kindref="compound">sandbox_callback</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="135" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1ab46713f171a6596f288c056205b0453d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrlbox_1_1sandbox__callback" kindref="compound">sandbox_callback</ref> &amp;</type>
        <definition>sandbox_callback &amp; rlbox::sandbox_callback&lt; T, T_Sbx &gt;::operator=</definition>
        <argsstring>(sandbox_callback &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classrlbox_1_1sandbox__callback" kindref="compound">sandbox_callback</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="140" column="27" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="140" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a533080e1c309f61779c132037c232c8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rlbox::sandbox_callback&lt; T, T_Sbx &gt;::unregister</definition>
        <argsstring>()</argsstring>
        <name>unregister</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="148" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a12a483d0f7051a1f9d8226161a9e5f6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rlbox::sandbox_callback&lt; T, T_Sbx &gt;::~sandbox_callback</definition>
        <argsstring>()</argsstring>
        <name>~sandbox_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="154" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1ad587e0c79682c3f92c90bfdf7c974322" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rlbox::sandbox_callback&lt; T, T_Sbx &gt;::is_registered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_registered</name>
        <briefdescription>
<para>Check if callback is registered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="159" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a9d7a4e08413d3989ce8633ea459b1110" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::sandbox_callback&lt; T, T_Sbx &gt;::UNSAFE_unverified</definition>
        <argsstring>() const noexcept</argsstring>
        <name>UNSAFE_unverified</name>
        <briefdescription>
<para>Unwrap a callback without verification. This is an unsafe operation and should be used with care. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="165" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a0a71e99d85bd22cd642327017c863b26" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::sandbox_callback&lt; T, T_Sbx &gt;::UNSAFE_sandboxed</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox) const noexcept</argsstring>
        <name>UNSAFE_sandboxed</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <briefdescription>
<para>Like UNSAFE_unverified, but get the underlying sandbox representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sandbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to sandbox. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="172" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a8a9a501dd7e47030fabf84491303354f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::sandbox_callback&lt; T, T_Sbx &gt;::UNSAFE_unverified</definition>
        <argsstring>() noexcept</argsstring>
        <name>UNSAFE_unverified</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="177" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1sandbox__callback_1a12f4b98341c36fa3eb97d9da82443bc8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::sandbox_callback&lt; T, T_Sbx &gt;::UNSAFE_sandboxed</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox) noexcept</argsstring>
        <name>UNSAFE_sandboxed</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="178" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="178" bodyend="182"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="36" column="1" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="37" bodyend="183"/>
    <listofallmembers>
      <member refid="classrlbox_1_1sandbox__callback_1a98c8667613c794661c7398a74a8ae0ce" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>callback</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a22ba7a273103adfdefa7aea31c5f79a8" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>callback_interceptor</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a34399e7a42798f1d840e1dc466d5ef4e" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>callback_trampoline</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a94693a8e6c2b78e7ef97dc7b75725dd0" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>get_raw_sandbox_value</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a72090fc430b1b20349a3b40437f73d4e" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>get_raw_sandbox_value</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1ab5a304f02011f0a4385c149bc7619e54" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>get_raw_value</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a0ce763c5aa54385263a3f40055e3ef76" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>get_raw_value</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1ad587e0c79682c3f92c90bfdf7c974322" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>is_registered</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a4a49a8d63345764ddde4dc3c0552aef6" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>key</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a848ba6767b7e3b7a4f4b1d5247801e89" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>move_obj</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1ab46713f171a6596f288c056205b0453d" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>operator=</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a5f90f6d66b8dad7a40394f5ff83f604a" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>sandbox</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1ab6886f593df13c2aa282aff54c14b374" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>sandbox_callback</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1ad092fdea1356d88bfaaaa6721b91a765" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>sandbox_callback</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1af9453a813aa03d7b817b31f4ff82ce69" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>sandbox_callback</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1acdf03310deac0be193c94186bfd2d989" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>T_Callback</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1aa0faf902a429a881919482e64842ba4f" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>T_Interceptor</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a9e1e0dfdc9fbd1bfe4ad923349c713e8" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>T_Trampoline</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a533080e1c309f61779c132037c232c8d" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>unregister</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a8070ea8fa083f2dcf1c84741d9373818" prot="private" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>unregister_helper</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a0a71e99d85bd22cd642327017c863b26" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>UNSAFE_sandboxed</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a12f4b98341c36fa3eb97d9da82443bc8" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>UNSAFE_sandboxed</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a9d7a4e08413d3989ce8633ea459b1110" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>UNSAFE_unverified</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a8a9a501dd7e47030fabf84491303354f" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>UNSAFE_unverified</name></member>
      <member refid="classrlbox_1_1sandbox__callback_1a12a483d0f7051a1f9d8226161a9e5f6f" prot="public" virt="non-virtual"><scope>rlbox::sandbox_callback</scope><name>~sandbox_callback</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
