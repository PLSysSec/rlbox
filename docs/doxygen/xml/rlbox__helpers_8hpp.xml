<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="rlbox__helpers_8hpp" kind="file" language="C++">
    <compoundname>rlbox_helpers.hpp</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">mutex</includes>
    <includes refid="rlbox__stdlib__polyfill_8hpp" local="yes">rlbox_stdlib_polyfill.hpp</includes>
    <includedby refid="rlbox_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp</includedby>
    <includedby refid="rlbox__app__pointer_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_app_pointer.hpp</includedby>
    <includedby refid="rlbox__conversion_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_conversion.hpp</includedby>
    <includedby refid="rlbox__dylib__sandbox_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_dylib_sandbox.hpp</includedby>
    <includedby refid="rlbox__noop__sandbox_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_noop_sandbox.hpp</includedby>
    <includedby refid="rlbox__policy__types_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp</includedby>
    <includedby refid="rlbox__sandbox_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp</includedby>
    <includedby refid="rlbox__stdlib_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_stdlib.hpp</includedby>
    <includedby refid="rlbox__struct__support_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_struct_support.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp</label>
        <link refid="rlbox__helpers_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>rlbox_stdlib_polyfill.hpp</label>
        <link refid="rlbox__stdlib__polyfill_8hpp_source"/>
      </node>
      <node id="2">
        <label>cstdlib</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>mutex</label>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
      <node id="5">
        <label>type_traits</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp</label>
        <link refid="rlbox_8hpp_source"/>
      </node>
      <node id="3">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_app_pointer.hpp</label>
        <link refid="rlbox__app__pointer_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_conversion.hpp</label>
        <link refid="rlbox__conversion_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_dylib_sandbox.hpp</label>
        <link refid="rlbox__dylib__sandbox_8hpp_source"/>
      </node>
      <node id="1">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp</label>
        <link refid="rlbox__helpers_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_noop_sandbox.hpp</label>
        <link refid="rlbox__noop__sandbox_8hpp_source"/>
      </node>
      <node id="7">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp</label>
        <link refid="rlbox__policy__types_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp</label>
        <link refid="rlbox__sandbox_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_stdlib.hpp</label>
        <link refid="rlbox__stdlib_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_struct_support.hpp</label>
        <link refid="rlbox__struct__support_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structrlbox_1_1detail_1_1compile__time__for__detail_1_1num" prot="public">rlbox::detail::compile_time_for_detail::num</innerclass>
    <innerclass refid="classrlbox_1_1detail_1_1scope__exit" prot="public">rlbox::detail::scope_exit</innerclass>
    <innernamespace refid="namespacerlbox">rlbox</innernamespace>
    <innernamespace refid="namespacerlbox_1_1detail">rlbox::detail</innernamespace>
    <innernamespace refid="namespacerlbox_1_1detail_1_1compile__time__for__detail">rlbox::detail::compile_time_for_detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="rlbox__helpers_8hpp_1ad299627a1baea4d034db89313f2543a9" prot="public" static="no">
        <name>rlbox_detail_static_fail_because</name>
        <param><defname>CondExpr</defname></param>
        <param><defname>Message</defname></param>
        <initializer>    static_assert(!(CondExpr), Message)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="46" column="12" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1a9aeaa68e3fa8d629fd1676022e125efd" prot="public" static="no">
        <name>RLBOX_DEBUG_ASSERT</name>
        <param><defname>...</defname></param>
        <initializer>(void)0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="54" column="12" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1aa951ef1ac3c130c23dab718b23eb7f52" prot="public" static="no">
        <name>RLBOX_UNUSED</name>
        <param><defname>...</defname></param>
        <initializer>(void)__VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="57" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1ae89c6b928ee7a5607cf555dcc7346b56" prot="public" static="no">
        <name>RLBOX_REQUIRE_SEMI_COLON</name>
        <initializer>static_assert(true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="59" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1ae5ac8bd87a92fc820e651db0f6942f12" prot="public" static="no">
        <name>if_constexpr_named</name>
        <param><defname>varName</defname></param>
        <param><defname>...</defname></param>
        <initializer>  if constexpr (constexpr auto varName = __VA_ARGS__; varName)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="61" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1a3c9318b4a72c32849f024e6ecf4796b4" prot="public" static="no">
        <name>RLBOX_SHARED_LOCK</name>
        <param><defname>name</defname></param>
        <initializer>std::shared_timed_mutex name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="79" column="11" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1addf39a9a87daf027392d839207cf96f8" prot="public" static="no">
        <name>RLBOX_ACQUIRE_SHARED_GUARD</name>
        <param><defname>name</defname></param>
        <param><defname>...</defname></param>
        <initializer>    std::shared_lock&lt;std::shared_timed_mutex&gt; name(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="80" column="11" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1a08a475449e11aeed7dee85f4211f779c" prot="public" static="no">
        <name>RLBOX_ACQUIRE_UNIQUE_GUARD</name>
        <param><defname>name</defname></param>
        <param><defname>...</defname></param>
        <initializer>    std::unique_lock&lt;std::shared_timed_mutex&gt; name(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="82" column="11" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1aa4b3ef8b83d2ffda9c8429ebc6f289c7" prot="public" static="no">
        <name>rlbox_detail_forward_binop_to_base</name>
        <param><defname>opSymbol</defname></param>
        <param><defname>...</defname></param>
        <initializer>  template&lt;typename T_Rhs&gt;                                                     \
  inline auto operator opSymbol(T_Rhs rhs)                                     \
  {                                                                            \
    auto b = static_cast&lt;__VA_ARGS__*&gt;(this);                                  \
    return (*b)opSymbol rhs;                                                   \
  }                                                                            \
  RLBOX_REQUIRE_SEMI_COLON</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="92" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1ac8ed7051dd56ef3c64c356dd0d26069d" prot="public" static="no">
        <name>rlbox_detail_forward_to_const</name>
        <param><defname>func_name</defname></param>
        <param><defname>result_type</defname></param>
        <initializer>  using T_ConstClassPtr = std::add_pointer_t&lt;                                  \
    std::add_const_t&lt;std::remove_pointer_t&lt;decltype(this)&gt;&gt;&gt;;                  \
  if constexpr (detail::rlbox_is_tainted_v&lt;result_type&gt; &amp;&amp;                     \
                !std::is_reference_v&lt;result_type&gt;) {                           \
    return sandbox_const_cast&lt;detail::rlbox_remove_wrapper_t&lt;result_type&gt;&gt;(    \
      const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name());                         \
  } else if constexpr (detail::is_fundamental_or_enum_v&lt;result_type&gt; ||        \
                       detail::is_std_array_v&lt;result_type&gt; ||                  \
                       detail::is_func_ptr_v&lt;result_type&gt; ||                   \
                       std::is_class_v&lt;result_type&gt;) {                         \
    return const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name();                     \
  } else {                                                                     \
    return const_cast&lt;result_type&gt;(                                            \
      const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name());                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="101" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1abf71479e7859dd57b5f9b989ee84ff2d" prot="public" static="no">
        <name>rlbox_detail_forward_to_const_a</name>
        <param><defname>func_name</defname></param>
        <param><defname>result_type</defname></param>
        <param><defname>...</defname></param>
        <initializer>  using T_ConstClassPtr = std::add_pointer_t&lt;                                  \
    std::add_const_t&lt;std::remove_pointer_t&lt;decltype(this)&gt;&gt;&gt;;                  \
  if constexpr (detail::rlbox_is_tainted_v&lt;result_type&gt; &amp;&amp;                     \
                !std::is_reference_v&lt;result_type&gt;) {                           \
    static_assert(detail::rlbox_is_tainted_v&lt;result_type&gt;);                    \
    return sandbox_const_cast&lt;detail::rlbox_remove_wrapper_t&lt;result_type&gt;&gt;(    \
      const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name(__VA_ARGS__));              \
  } else if constexpr (detail::is_fundamental_or_enum_v&lt;result_type&gt; ||        \
                       detail::is_std_array_v&lt;result_type&gt; ||                  \
                       detail::is_func_ptr_v&lt;result_type&gt; ||                   \
                       std::is_class_v&lt;result_type&gt;) {                         \
    return const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name(__VA_ARGS__);          \
  } else {                                                                     \
    return const_cast&lt;result_type&gt;(                                            \
      const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name(__VA_ARGS__));              \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="118" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1abb5c3bf792e819ee1df4c2eac99b5154" prot="public" static="no">
        <name>rlbox_detail_member_and_const</name>
        <param><defname>sig</defname></param>
        <param><defname>...</defname></param>
        <initializer>  sig __VA_ARGS__                                                              \
                                                                               \
    sig const __VA_ARGS__                                                      \
                                                                               \
    static_assert(true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="136" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rlbox__helpers_8hpp_1a61663c769b3d66775fa9b06e4e9011e6" prot="public" static="no">
        <name>KEEP_CLASSES_FRIENDLY</name>
        <initializer>  template&lt;template&lt;typename, typename&gt; typename U1, typename U2, typename U3&gt; \
  friend class tainted_base_impl;                                              \
                                                                               \
  template&lt;typename U1, typename U2&gt;                                           \
  friend class tainted;                                                        \
                                                                               \
  template&lt;typename U1, typename U2&gt;                                           \
  friend class tainted_volatile;                                               \
                                                                               \
  template&lt;typename U1&gt;                                                        \
  friend class rlbox_sandbox;                                                  \
                                                                               \
  template&lt;typename U1, typename U2&gt;                                           \
  friend class sandbox_callback;                                               \
                                                                               \
  template&lt;typename U1, typename U2&gt;                                           \
  friend class app_pointer;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" line="238" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>private,<sp/>include<sp/>&quot;rlbox.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>friend<sp/>&quot;rlbox_.*\.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RLBOX_USE_CUSTOM_SHARED_LOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rlbox_stdlib_polyfill.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">rlbox<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CompileErrorCode<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dynamic_check(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>msg)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!check)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>__cpp_exceptions<sp/>&amp;&amp;<sp/>defined(RLBOX_USE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(msg);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>RLBOX_CUSTOM_ABORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RLBOX_CUSTOM_ABORT(msg);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>msg<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RLBOX_NO_COMPILE_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__cpp_exceptions<sp/>&amp;&amp;<sp/>defined(RLBOX_USE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>rlbox_detail_static_fail_because(CondExpr,<sp/>Message)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((void)(CondExpr)),<sp/>throw<sp/>std::runtime_error(Message)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>rlbox_detail_static_fail_because(CondExpr,<sp/>Message)<sp/>abort()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>rlbox_detail_static_fail_because(CondExpr,<sp/>Message)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(!(CondExpr),<sp/>Message)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RLBOX_ENABLE_DEBUG_ASSERTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>RLBOX_DEBUG_ASSERT(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::rlbox::detail::dynamic_check(__VA_ARGS__,<sp/>&quot;Debug<sp/>assertion<sp/>failed&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>RLBOX_DEBUG_ASSERT(...)<sp/>(void)0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RLBOX_UNUSED(...)<sp/>(void)__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RLBOX_REQUIRE_SEMI_COLON<sp/>static_assert(true)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>if_constexpr_named(varName,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/>if<sp/>constexpr<sp/>(constexpr<sp/>auto<sp/>varName<sp/>=<sp/>__VA_ARGS__;<sp/>varName)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printTypes()</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>defined(__GNUC__)<sp/>||<sp/>defined(__GNUG__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>__PRETTY_FUNCTION__<sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>__FUNCSIG__<sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unsupported&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>extension<sp/>point<sp/>so<sp/>applications<sp/>can<sp/>provide<sp/>their<sp/>own<sp/>shared<sp/>lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RLBOX_USE_CUSTOM_SHARED_LOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>RLBOX_SHARED_LOCK(name)<sp/>std::shared_timed_mutex<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>RLBOX_ACQUIRE_SHARED_GUARD(name,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>std::shared_lock&lt;std::shared_timed_mutex&gt;<sp/>name(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>RLBOX_ACQUIRE_UNIQUE_GUARD(name,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::shared_timed_mutex&gt;<sp/>name(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(RLBOX_SHARED_LOCK)<sp/>||<sp/>!defined(RLBOX_ACQUIRE_SHARED_GUARD)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(RLBOX_ACQUIRE_UNIQUE_GUARD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>error<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;RLBOX_USE_CUSTOM_SHARED_LOCK<sp/>defined<sp/>but<sp/>missing<sp/>definitions<sp/>for<sp/>RLBOX_SHARED_LOCK,<sp/>RLBOX_ACQUIRE_SHARED_GUARD,<sp/>RLBOX_ACQUIRE_UNIQUE_GUARD&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rlbox_detail_forward_binop_to_base(opSymbol,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>T_Rhs&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/>inline<sp/>auto<sp/>operator<sp/>opSymbol(T_Rhs<sp/>rhs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>b<sp/>=<sp/>static_cast&lt;__VA_ARGS__*&gt;(this);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(*b)opSymbol<sp/>rhs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/>RLBOX_REQUIRE_SEMI_COLON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rlbox_detail_forward_to_const(func_name,<sp/>result_type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/>using<sp/>T_ConstClassPtr<sp/>=<sp/>std::add_pointer_t&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>std::add_const_t&lt;std::remove_pointer_t&lt;decltype(this)&gt;&gt;&gt;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/>if<sp/>constexpr<sp/>(detail::rlbox_is_tainted_v&lt;result_type&gt;<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_reference_v&lt;result_type&gt;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>sandbox_const_cast&lt;detail::rlbox_remove_wrapper_t&lt;result_type&gt;&gt;(<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>if<sp/>constexpr<sp/>(detail::is_fundamental_or_enum_v&lt;result_type&gt;<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_std_array_v&lt;result_type&gt;<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_func_ptr_v&lt;result_type&gt;<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_class_v&lt;result_type&gt;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;result_type&gt;(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rlbox_detail_forward_to_const_a(func_name,<sp/>result_type,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/>using<sp/>T_ConstClassPtr<sp/>=<sp/>std::add_pointer_t&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>std::add_const_t&lt;std::remove_pointer_t&lt;decltype(this)&gt;&gt;&gt;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/>if<sp/>constexpr<sp/>(detail::rlbox_is_tainted_v&lt;result_type&gt;<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_reference_v&lt;result_type&gt;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(detail::rlbox_is_tainted_v&lt;result_type&gt;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>sandbox_const_cast&lt;detail::rlbox_remove_wrapper_t&lt;result_type&gt;&gt;(<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name(__VA_ARGS__));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>if<sp/>constexpr<sp/>(detail::is_fundamental_or_enum_v&lt;result_type&gt;<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_std_array_v&lt;result_type&gt;<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_func_ptr_v&lt;result_type&gt;<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_class_v&lt;result_type&gt;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name(__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;result_type&gt;(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;T_ConstClassPtr&gt;(this)-&gt;func_name(__VA_ARGS__));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rlbox_detail_member_and_const(sig,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/>sig<sp/>__VA_ARGS__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>sig<sp/>const<sp/>__VA_ARGS__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(true)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remove_volatile_from_ptr_cast(T*<sp/>ptr)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>T_Result<sp/>=<sp/>std::add_pointer_t&lt;std::remove_volatile_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T_Result</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://stackoverflow.com/questions/37602057/why-isnt-a-for-loop-a-compile-time-expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">compile_time_for_detail<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="153" refid="structrlbox_1_1detail_1_1compile__time__for__detail_1_1num" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1compile__time__for__detail_1_1num" kindref="compound">num</ref></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">F,<sp/>std::size_t...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compile_time_for_helper(F<sp/>func,<sp/>std::index_sequence&lt;Is...&gt;)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(func(<ref refid="structrlbox_1_1detail_1_1compile__time__for__detail_1_1num" kindref="compound">num&lt;Is&gt;</ref>{}),<sp/>...);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compile_time_for(F<sp/>func)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_time_for_detail::compile_time_for_helper(</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func,<sp/>std::make_index_sequence&lt;N&gt;());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>return_first_result(T<sp/>first_task,<sp/>T2<sp/>second_task)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>T_Result<sp/>=<sp/>rlbox::detail::polyfill::invoke_result_t&lt;T&gt;;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_void_v&lt;T_Result&gt;)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first_task();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>second_task();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>first_task();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>second_task();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scope<sp/>Exit<sp/>guards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T_ExitFunc&gt;</highlight></codeline>
<codeline lineno="189" refid="classrlbox_1_1detail_1_1scope__exit" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>T_ExitFunc<sp/>exit_func;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>released;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref>(T_ExitFunc&amp;&amp;<sp/>cleanup)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>exit_func(cleanup)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>released(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref>(<ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref>&amp;&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>exit_func(std::move(rhs.exit_func))</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>released(rhs.released)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rhs.release();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">~scope_exit</ref>()</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(released)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_func();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>release()<sp/>{<sp/>released<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref>&amp;<sp/>operator=(<ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T_ExitFunc&gt;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit&lt;T_ExitFunc&gt;</ref><sp/>make_scope_exit(</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>T_ExitFunc&amp;&amp;<sp/>exitFunction)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrlbox_1_1detail_1_1scope__exit" kindref="compound">scope_exit&lt;T_ExitFunc&gt;</ref>(std::move(exitFunction));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="230"><highlight class="comment">Make<sp/>sure<sp/>classes<sp/>can<sp/>access<sp/>the<sp/>private<sp/>memmbers<sp/>of<sp/>tainted&lt;T1&gt;<sp/>and</highlight></codeline>
<codeline lineno="231"><highlight class="comment">tainted_volatile.<sp/>Ideally,<sp/>this<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="232"><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment">template<sp/>&lt;typename<sp/>U1&gt;</highlight></codeline>
<codeline lineno="234"><highlight class="comment">friend<sp/>class<sp/>tainted&lt;U1,<sp/>T_Sandbox&gt;;</highlight></codeline>
<codeline lineno="235"><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment">But<sp/>C++<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>allow<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="237"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEEP_CLASSES_FRIENDLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/>template&lt;template&lt;typename,<sp/>typename&gt;<sp/>typename<sp/>U1,<sp/>typename<sp/>U2,<sp/>typename<sp/>U3&gt;<sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/>friend<sp/>class<sp/>tainted_base_impl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>U1,<sp/>typename<sp/>U2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/>friend<sp/>class<sp/>tainted;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>U1,<sp/>typename<sp/>U2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/>friend<sp/>class<sp/>tainted_volatile;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>U1&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/>friend<sp/>class<sp/>rlbox_sandbox;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>U1,<sp/>typename<sp/>U2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/>friend<sp/>class<sp/>sandbox_callback;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>U1,<sp/>typename<sp/>U2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/>friend<sp/>class<sp/>app_pointer;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp"/>
  </compounddef>
</doxygen>
