<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="rlbox__stdlib__polyfill_8hpp" kind="file" language="C++">
    <compoundname>rlbox_stdlib_polyfill.hpp</compoundname>
    <includedby refid="rlbox__helpers_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp</includedby>
    <includedby refid="rlbox__sandbox_8hpp" local="yes">/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp</includedby>
    <invincdepgraph>
      <node id="3">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp</label>
        <link refid="rlbox_8hpp_source"/>
      </node>
      <node id="4">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_app_pointer.hpp</label>
        <link refid="rlbox__app__pointer_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_conversion.hpp</label>
        <link refid="rlbox__conversion_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_dylib_sandbox.hpp</label>
        <link refid="rlbox__dylib__sandbox_8hpp_source"/>
      </node>
      <node id="2">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_helpers.hpp</label>
        <link refid="rlbox__helpers_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_noop_sandbox.hpp</label>
        <link refid="rlbox__noop__sandbox_8hpp_source"/>
      </node>
      <node id="8">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp</label>
        <link refid="rlbox__policy__types_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_sandbox.hpp</label>
        <link refid="rlbox__sandbox_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_stdlib.hpp</label>
        <link refid="rlbox__stdlib_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_stdlib_polyfill.hpp</label>
        <link refid="rlbox__stdlib__polyfill_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_struct_support.hpp</label>
        <link refid="rlbox__struct__support_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" prot="public">rlbox::detail::polyfill::__nat</innerclass>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" prot="public">rlbox::detail::polyfill::__nothrow_invokable_r_imp</innerclass>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp_3_01true_00_01false_00_01__R20797f25b6d2c31e27d840915001dc22" prot="public">rlbox::detail::polyfill::__nothrow_invokable_r_imp&lt; true, false, _Ret, _Fp, _Args... &gt;</innerclass>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp_3_01true_00_01true_00_01__Re94b011956b38a71c476d923b84fea4ba" prot="public">rlbox::detail::polyfill::__nothrow_invokable_r_imp&lt; true, true, _Ret, _Fp, _Args... &gt;</innerclass>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1helper____invoke__of" prot="public">rlbox::detail::polyfill::helper__invoke_of</innerclass>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1invoke__result" prot="public">rlbox::detail::polyfill::invoke_result</innerclass>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1is__invocable" prot="public">rlbox::detail::polyfill::is_invocable</innerclass>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1is__invocable__r" prot="public">rlbox::detail::polyfill::is_invocable_r</innerclass>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1is__nothrow__invocable" prot="public">rlbox::detail::polyfill::is_nothrow_invocable</innerclass>
    <innerclass refid="structrlbox_1_1detail_1_1polyfill_1_1is__nothrow__invocable__r" prot="public">rlbox::detail::polyfill::is_nothrow_invocable_r</innerclass>
    <innernamespace refid="namespacerlbox">rlbox</innernamespace>
    <innernamespace refid="namespacerlbox_1_1detail">rlbox::detail</innernamespace>
    <innernamespace refid="namespacerlbox_1_1detail_1_1polyfill">rlbox::detail::polyfill</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="rlbox__stdlib__polyfill_8hpp_1a8e7b7f53bfb1ceecb65ca5e6d11283f1" prot="public" static="no">
        <name>INVOKE_RETURN</name>
        <param><defname>...</defname></param>
        <initializer>  noexcept(noexcept(__VA_ARGS__))-&gt;decltype(__VA_ARGS__) { return __VA_ARGS__; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_stdlib_polyfill.hpp" line="36" column="9" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_stdlib_polyfill.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>a<sp/>polyfill<sp/>for<sp/>parts<sp/>of<sp/>the<sp/>C++<sp/>standard<sp/>library<sp/>available<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>newer<sp/>compilers.<sp/>Since<sp/>these<sp/>are<sp/>only<sp/>compile<sp/>time<sp/>requirements,<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>just<sp/>include<sp/>these<sp/>as<sp/>part<sp/>of<sp/>the<sp/>rlbox<sp/>library<sp/>in<sp/>case<sp/>the<sp/>target<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>support<sp/>these<sp/>features.<sp/>For<sp/>instance<sp/>clang-5<sp/>which<sp/>rlbox<sp/>supports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>support<sp/>std::invocable<sp/>and<sp/>related<sp/>functionality<sp/>in<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>is<sp/>polyfilled<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>was<sp/>borrowed<sp/>from<sp/>clang&apos;s<sp/>standard<sp/>library<sp/>-<sp/>libc++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Link:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/llvm-mirror/libcxx/blob/master/include/type_traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libc++<sp/>is<sp/>dual<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>and<sp/>the<sp/>UIUC<sp/>License<sp/>(a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BSD-like<sp/>license)<sp/>and<sp/>is<sp/>therefore<sp/>compatible<sp/>with<sp/>our<sp/>code<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::invocable<sp/>and<sp/>friends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">rlbox::detail::polyfill<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" kindref="compound">__nat</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" kindref="compound">__nat</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" kindref="compound">__nat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" kindref="compound">__nat</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" kindref="compound">__nat</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" kindref="compound">__nat</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" kindref="compound">~__nat</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_Val&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_BoolConstant<sp/>=<sp/>std::integral_constant&lt;bool,<sp/>_Val&gt;;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_Tp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_Up&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_IsNotSame<sp/>=<sp/>_BoolConstant&lt;!std::is_same&lt;_Tp,<sp/>_Up&gt;::value&gt;;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INVOKE_RETURN(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/>noexcept(noexcept(__VA_ARGS__))-&gt;decltype(__VA_ARGS__)<sp/>{<sp/>return<sp/>__VA_ARGS__;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>helper__invoke(_Fp&amp;&amp;<sp/>__f,<sp/>_Args&amp;&amp;...<sp/>__args)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>INVOKE_RETURN(std::forward&lt;_Fp&gt;(__f)(std::forward&lt;_Args&gt;(__args)...))</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>helper__invoke_constexpr(_Fp&amp;&amp;<sp/>__f,<sp/>_Args&amp;&amp;...<sp/>__args)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INVOKE_RETURN(std::forward&lt;_Fp&gt;(__f)(std::forward&lt;_Args&gt;(__args)...))</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INVOKE_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>__invokable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__invokable_r</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_XFp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_XArgs&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>__try_call(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(helper__invoke(std::declval&lt;_XFp&gt;(),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;_XArgs&gt;()...));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_XFp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_XArgs&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nat" kindref="compound">__nat</ref><sp/>__try_call(...);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Check<sp/>that<sp/>_Ret,<sp/>_Fp,<sp/>and<sp/>_Args...<sp/>are<sp/>all<sp/>complete<sp/>types,<sp/>cv<sp/>void,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>incomplete<sp/>array<sp/>types<sp/>as<sp/>required<sp/>by<sp/>the<sp/>standard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_Result<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(__try_call&lt;_Fp,<sp/>_Args...&gt;(0));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>_IsNotSame&lt;_Result,<sp/>__nat&gt;::value,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;std::is_void&lt;_Ret&gt;::value,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;_Result,<sp/>_Ret&gt;&gt;::type,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::false_type&gt;::type;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>type::value;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>__invokable<sp/>=<sp/>__invokable_r&lt;void,<sp/>_Fp,<sp/>_Args...&gt;;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_IsInvokable,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_IsCVVoid,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Ret,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="80" refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" kindref="compound">__nothrow_invokable_r_imp</ref></highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="86" refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp_3_01true_00_01false_00_01__R20797f25b6d2c31e27d840915001dc22" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" kindref="compound">__nothrow_invokable_r_imp</ref>&lt;true,<sp/>false,<sp/>_Ret,<sp/>_Fp,<sp/>_Args...&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" kindref="compound">__nothrow_invokable_r_imp</ref><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" kindref="compound">_ThisT</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_Tp&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__test_noexcept(_Tp)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(_ThisT::__test_noexcept&lt;_Ret&gt;(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>helper__invoke(std::declval&lt;_Fp&gt;(),<sp/>std::declval&lt;_Args&gt;()...)));</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="98" refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp_3_01true_00_01true_00_01__Re94b011956b38a71c476d923b84fea4ba" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" kindref="compound">__nothrow_invokable_r_imp</ref>&lt;true,<sp/>true,<sp/>_Ret,<sp/>_Fp,<sp/>_Args...&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(helper__invoke(std::declval&lt;_Fp&gt;(),<sp/>std::declval&lt;_Args&gt;()...));</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" kindref="compound">__nothrow_invokable_r</ref><sp/>=</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" kindref="compound">__nothrow_invokable_r_imp</ref>&lt;__invokable_r&lt;_Ret,<sp/>_Fp,<sp/>_Args...&gt;::value,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_void&lt;_Ret&gt;::value,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Ret,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Fp,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Args...&gt;;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" kindref="compound">__nothrow_invokable</ref><sp/>=</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1____nothrow__invokable__r__imp" kindref="compound">__nothrow_invokable_r_imp</ref>&lt;__invokable&lt;_Fp,<sp/>_Args...&gt;::value,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Fp,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Args...&gt;;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="121" refid="structrlbox_1_1detail_1_1polyfill_1_1helper____invoke__of" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1helper____invoke__of" kindref="compound">helper__invoke_of</ref></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::enable_if&lt;__invokable&lt;_Fp,<sp/>_Args...&gt;::value,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>__invokable_r&lt;void,<sp/>_Fp,<sp/>_Args...&gt;::_Result&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>invoke_result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="129" refid="structrlbox_1_1detail_1_1polyfill_1_1invoke__result" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1invoke__result" kindref="compound">invoke_result</ref><sp/>:<sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1helper____invoke__of" kindref="compound">helper__invoke_of</ref>&lt;_Fn,<sp/>_Args...&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>invoke_result_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1invoke__result" kindref="compound">invoke_result</ref>&lt;_Fn,<sp/>_Args...&gt;::type;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is_invocable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="138" refid="structrlbox_1_1detail_1_1polyfill_1_1is__invocable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1is__invocable" kindref="compound">is_invocable</ref></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>:<sp/>std::integral_constant&lt;bool,<sp/>__invokable&lt;_Fn,<sp/>_Args...&gt;::value&gt;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="143" refid="structrlbox_1_1detail_1_1polyfill_1_1is__invocable__r" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1is__invocable__r" kindref="compound">is_invocable_r</ref></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>:<sp/>std::integral_constant&lt;bool,<sp/>__invokable_r&lt;_Ret,<sp/>_Fn,<sp/>_Args...&gt;::value&gt;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_invocable_v<sp/>=<sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1is__invocable" kindref="compound">is_invocable</ref>&lt;_Fn,<sp/>_Args...&gt;::value;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_invocable_r_v<sp/>=</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1is__invocable__r" kindref="compound">is_invocable_r</ref>&lt;_Ret,<sp/>_Fn,<sp/>_Args...&gt;::value;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is_nothrow_invocable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="157" refid="structrlbox_1_1detail_1_1polyfill_1_1is__nothrow__invocable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1is__nothrow__invocable" kindref="compound">is_nothrow_invocable</ref></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>:<sp/>std::integral_constant&lt;bool,<sp/>__nothrow_invokable&lt;_Fn,<sp/>_Args...&gt;::value&gt;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="162" refid="structrlbox_1_1detail_1_1polyfill_1_1is__nothrow__invocable__r" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlbox_1_1detail_1_1polyfill_1_1is__nothrow__invocable__r" kindref="compound">is_nothrow_invocable_r</ref></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>:<sp/>std::integral_constant&lt;bool,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__nothrow_invokable_r&lt;_Ret,<sp/>_Fn,<sp/>_Args...&gt;::value&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_nothrow_invocable_v<sp/>=</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1is__nothrow__invocable" kindref="compound">is_nothrow_invocable</ref>&lt;_Fn,<sp/>_Args...&gt;::value;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Ret,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Fn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>_Args&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_nothrow_invocable_r_v<sp/>=</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="structrlbox_1_1detail_1_1polyfill_1_1is__nothrow__invocable__r" kindref="compound">is_nothrow_invocable_r</ref>&lt;_Ret,<sp/>_Fn,<sp/>_Args...&gt;::value;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_stdlib_polyfill.hpp"/>
  </compounddef>
</doxygen>
