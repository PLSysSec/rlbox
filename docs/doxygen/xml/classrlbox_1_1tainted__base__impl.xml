<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classrlbox_1_1tainted__base__impl" kind="class" language="C++" prot="public">
    <compoundname>rlbox::tainted_base_impl</compoundname>
    <templateparamlist>
      <param>
        <type>template&lt; typename, typename &gt; typename</type>
        <declname>T_Wrap</declname>
        <defname>T_Wrap</defname>
      </param>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename T_Sbx</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classrlbox_1_1tainted__base__impl_1af9ac82d1c1266df3f280f8b53c2ea815" prot="private" static="no">
        <type>std::conditional_t&lt; std::is_pointer_v&lt; T &gt;, <ref refid="classrlbox_1_1tainted__volatile" kindref="compound">tainted_volatile</ref>&lt; detail::dereference_result_t&lt; T &gt;, T_Sbx &gt;, T_Wrap&lt; detail::dereference_result_t&lt; T &gt;, T_Sbx &gt; &gt;</type>
        <definition>using rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::T_OpSubscriptArrRet =  std::conditional_t&lt; std::is_pointer_v&lt;T&gt;, tainted_volatile&lt;detail::dereference_result_t&lt;T&gt;, T_Sbx&gt;, T_Wrap&lt;detail::dereference_result_t&lt;T&gt;, T_Sbx&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>T_OpSubscriptArrRet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="370" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrlbox_1_1tainted__base__impl_1ab367db1429d5326c9684d2eef6364fa9" prot="private" static="no">
        <type><ref refid="classrlbox_1_1tainted__volatile" kindref="compound">tainted_volatile</ref>&lt; std::remove_pointer_t&lt; T &gt;, T_Sbx &gt;</type>
        <definition>using rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::T_OpDerefRet =  tainted_volatile&lt;std::remove_pointer_t&lt;T&gt;, T_Sbx&gt;</definition>
        <argsstring></argsstring>
        <name>T_OpDerefRet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="434" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrlbox_1_1tainted__base__impl_1ac70f724530042010d1366ab44ae6117a" prot="private" static="no">
        <type>detail::valid_array_el_t&lt; std::remove_cv_t&lt; std::remove_pointer_t&lt; T &gt; &gt; &gt;</type>
        <definition>using rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::T_CopyAndVerifyRangeEl =  detail::valid_array_el_t&lt;std::remove_cv_t&lt;std::remove_pointer_t&lt;T&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>T_CopyAndVerifyRangeEl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="581" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="582" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a66385fce7ba1bd883b74d887f1028917" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto &amp; rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::impl</definition>
        <argsstring>()</argsstring>
        <name>impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="33" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1abf804eac041d98eff1686fcb03d0a73c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto &amp; rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::impl</definition>
        <argsstring>() const</argsstring>
        <name>impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="34" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a01acab6b4bd8137afa03cf4b2678844f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::UNSAFE_unverified</definition>
        <argsstring>()</argsstring>
        <name>UNSAFE_unverified</name>
        <briefdescription>
<para>Unwrap a tainted value without verification. This is an unsafe operation and should be used with care. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="43" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a41f8eed43072bf173cce34cd3351191e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::UNSAFE_unverified</definition>
        <argsstring>() const</argsstring>
        <name>UNSAFE_unverified</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="44" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ae2c69129cbb9344e7d2623129f031214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::UNSAFE_sandboxed</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox)</argsstring>
        <name>UNSAFE_sandboxed</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <briefdescription>
<para>Like UNSAFE_unverified, but get the underlying sandbox representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sandbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to sandbox.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
For the Wasm-based sandbox, this function additionally validates the unwrapped value against the machine model of the sandbox (LP32). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="54" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a2fb81eab8dc3839f351d6d89410c2350" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::UNSAFE_sandboxed</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox) const</argsstring>
        <name>UNSAFE_sandboxed</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="58" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ac7d2f71a8fc72b922bfa1260d4a7ac94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::rlbox_detail_member_and_const</definition>
        <argsstring>(template&lt; size_t N &gt; inline auto unverified_safe_because(const char(&amp;reason)[N]), { RLBOX_UNUSED(reason);static_assert(!std::is_pointer_v&lt; T &gt;, &quot;unverified_safe_because does not support pointers. Use &quot; &quot;unverified_safe_pointer_because.&quot;);return UNSAFE_unverified();})</argsstring>
        <name>rlbox_detail_member_and_const</name>
        <param>
          <type>template&lt; size_t N &gt; inline auto </type>
          <declname>unverified_safe_because</declname>
          <array>const char(&amp;reason)[N]</array>
        </param>
        <param>
          <type>{ RLBOX_UNUSED(reason);static_assert(!std::is_pointer_v&lt; T &gt;, &quot;unverified_safe_because does not support pointers. Use &quot; &quot;unverified_safe_pointer_because.&quot;);return <ref refid="classrlbox_1_1tainted__base__impl_1a01acab6b4bd8137afa03cf4b2678844f" kindref="member">UNSAFE_unverified</ref>();}</type>
        </param>
        <briefdescription>
<para>Unwrap a tainted value without verification. This function should be used when unwrapping is safe. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>An explanation why the unverified unwrapping is safe. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="69" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1af9767a70f0e97d74c5d70a6511cff5d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::rlbox_detail_member_and_const</definition>
        <argsstring>(template&lt; size_t N &gt; inline auto unverified_safe_pointer_because(size_t count, const char(&amp;reason)[N]), { RLBOX_UNUSED(reason);static_assert(std::is_pointer_v&lt; T &gt;, &quot;Expected pointer type&quot;);using T_Pointed=std::remove_pointer_t&lt; T &gt;;if_constexpr_named(cond1, std::is_pointer_v&lt; T_Pointed &gt;) { rlbox_detail_static_fail_because(cond1, &quot;There is no way to use unverified_safe_pointer_because for &quot; &quot;&apos;pointers to pointers&apos; safely. Use copy_and_verify instead.&quot;);return nullptr;} auto ret=UNSAFE_unverified();if(ret !=nullptr) { size_t bytes=sizeof(T) *count;detail::check_range_doesnt_cross_app_sbx_boundary&lt; T_Sbx &gt;(ret, bytes);} return ret;})</argsstring>
        <name>rlbox_detail_member_and_const</name>
        <param>
          <type>template&lt; size_t N &gt; inline auto </type>
          <declname>unverified_safe_pointer_because</declname>
          <array>size_t count, const char(&amp;reason)[N]</array>
        </param>
        <param>
          <type>{ RLBOX_UNUSED(reason);static_assert(std::is_pointer_v&lt; T &gt;, &quot;Expected pointer type&quot;);using T_Pointed=std::remove_pointer_t&lt; T &gt;;if_constexpr_named(cond1, std::is_pointer_v&lt; T_Pointed &gt;) { rlbox_detail_static_fail_because(cond1, &quot;There is no way to use unverified_safe_pointer_because for &quot; &quot;&apos;pointers to pointers&apos; safely. Use <ref refid="classrlbox_1_1tainted__base__impl_1a701759aedd637f48cc97a0e6ada1c8a6" kindref="member">copy_and_verify</ref> instead.&quot;);return nullptr;} auto ret=<ref refid="classrlbox_1_1tainted__base__impl_1a01acab6b4bd8137afa03cf4b2678844f" kindref="member">UNSAFE_unverified</ref>();if(ret !=nullptr) { size_t bytes=sizeof(T) *count;detail::check_range_doesnt_cross_app_sbx_boundary&lt; T_Sbx &gt;(ret, bytes);} return ret;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="80" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1afd3ea6da54b1556e0bdfd222df1ed2e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::INTERNAL_unverified_safe</definition>
        <argsstring>()</argsstring>
        <name>INTERNAL_unverified_safe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="106" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1aadcc0f6dc4114d5c9ebecff33040c3c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::INTERNAL_unverified_safe</definition>
        <argsstring>() const</argsstring>
        <name>INTERNAL_unverified_safe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="107" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ac11254da0346088f7e2ccfdccf87deb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::BinaryOpValAndPtr</definition>
        <argsstring>(+)</argsstring>
        <name>BinaryOpValAndPtr</name>
        <param>
          <type>+</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="148" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ab64e73357c9a9387ca281d31e17bc490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::BinaryOpValAndPtr</definition>
        <argsstring>(-)</argsstring>
        <name>BinaryOpValAndPtr</name>
        <param>
          <type>-</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="149" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ac13751ef39495b930584164f841c540d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BinaryOp *</type>
        <definition>BinaryOp * rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::BinaryOp</definition>
        <argsstring>(/);BinaryOp(%</argsstring>
        <name>BinaryOp</name>
        <param>
          <type>/</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="175" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a03f7e6cbb4ac6cc48b5f523c69863fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BinaryOp^</type>
        <definition>BinaryOp^ rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::BinaryOp</definition>
        <argsstring>(&amp;);BinaryOp(|</argsstring>
        <name>BinaryOp</name>
        <param>
          <type>&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="178" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a100c45337a0ad48eb18ac977edb8cc48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::BinaryOp</definition>
        <argsstring>(&lt;&lt;)</argsstring>
        <name>BinaryOp</name>
        <param>
          <type>&lt;&lt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="181" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a19409368320571c2d44e5b41620fbe93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::BinaryOp</definition>
        <argsstring>(&gt; &gt;)</argsstring>
        <name>BinaryOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="182" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a15ced8f568f8899e55b6354f620cbc7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompoundAssignmentOp</definition>
        <argsstring>(+)</argsstring>
        <name>CompoundAssignmentOp</name>
        <param>
          <type>+</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="196" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a254df7254438c313621ff1a689dd5c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompoundAssignmentOp</definition>
        <argsstring>(-)</argsstring>
        <name>CompoundAssignmentOp</name>
        <param>
          <type>-</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="197" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a80fe4331b06226cf5e5187cf806a36e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompoundAssignmentOp *</type>
        <definition>CompoundAssignmentOp * rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompoundAssignmentOp</definition>
        <argsstring>(/);CompoundAssignmentOp(%</argsstring>
        <name>CompoundAssignmentOp</name>
        <param>
          <type>/</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="198" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a695650ceddb22aee9f17b290e721dbd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompoundAssignmentOp^</type>
        <definition>CompoundAssignmentOp^ rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompoundAssignmentOp</definition>
        <argsstring>(&amp;);CompoundAssignmentOp(|</argsstring>
        <name>CompoundAssignmentOp</name>
        <param>
          <type>&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="201" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ac234712a7d68b938c9c2f34bd4f96d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompoundAssignmentOp</definition>
        <argsstring>(&lt;&lt;)</argsstring>
        <name>CompoundAssignmentOp</name>
        <param>
          <type>&lt;&lt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="204" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a9d9190fa8cfeadd75e5352a050b021d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompoundAssignmentOp</definition>
        <argsstring>(&gt; &gt;)</argsstring>
        <name>CompoundAssignmentOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="205" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a6c8dca7aef6cbf28dec6cba42963e76a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::PreIncDecOps</definition>
        <argsstring>(+)</argsstring>
        <name>PreIncDecOps</name>
        <param>
          <type>+</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="218" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ab9decc76ea24942932c7288d2ee257c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::PreIncDecOps</definition>
        <argsstring>(-)</argsstring>
        <name>PreIncDecOps</name>
        <param>
          <type>-</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="219" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a2ccdf93dd8466df3985c4f7c9225af08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::PostIncDecOps</definition>
        <argsstring>(+)</argsstring>
        <name>PostIncDecOps</name>
        <param>
          <type>+</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="232" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a091f18be8cd32b34bec75322364e1f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::PostIncDecOps</definition>
        <argsstring>(-)</argsstring>
        <name>PostIncDecOps</name>
        <param>
          <type>-</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="233" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a950a68721c252366df818c0cbf4da4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BooleanBinaryOp &amp;&amp;</type>
        <definition>BooleanBinaryOp &amp;&amp; rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::BooleanBinaryOp</definition>
        <argsstring>(||);#define UnaryOp(opSymbol) UnaryOp(-</argsstring>
        <name>BooleanBinaryOp</name>
        <param>
          <type>||</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="288" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ac450c85ec8fa3c5046bcf3fb7aeca2d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::UnaryOp</definition>
        <argsstring>(~)</argsstring>
        <name>UnaryOp</name>
        <param>
          <type>~</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="307" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a257ae6c0b4a0fe1b1639044a572a038b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompareOp</definition>
        <argsstring>(==, true)</argsstring>
        <name>CompareOp</name>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="360" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a3d04a736a337294fc02a13baef2d78db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompareOp</definition>
        <argsstring>(!=, true)</argsstring>
        <name>CompareOp</name>
        <param>
          <type>!</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="361" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ac91498bde8eb4e3a384c666a65d5e7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompareOp</definition>
        <argsstring>(&lt;, false)</argsstring>
        <name>CompareOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="362" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a2665ce9ccc644be5556c05fb26470468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompareOp</definition>
        <argsstring>(&lt;=, false)</argsstring>
        <name>CompareOp</name>
        <param>
          <type>&lt;=</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="363" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a461a58872313be13c882039a4d286145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompareOp</definition>
        <argsstring>(&gt;, false)</argsstring>
        <name>CompareOp</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="364" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1af85745a199b95587d0d750439fae25bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::CompareOp</definition>
        <argsstring>(&gt;=, false)</argsstring>
        <name>CompareOp</name>
        <param>
          <type>&gt;=</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="365" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a0867903c2ba81b50c85f142682ef1c0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Rhs</type>
          </param>
        </templateparamlist>
        <type>const T_OpSubscriptArrRet &amp;</type>
        <definition>const T_OpSubscriptArrRet &amp; rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::operator[]</definition>
        <argsstring>(T_Rhs &amp;&amp;rhs) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>T_Rhs &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="378" column="36" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="378" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ae684874ca4a58d905b827bcd885a5877" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Rhs</type>
          </param>
        </templateparamlist>
        <type>T_OpSubscriptArrRet &amp;</type>
        <definition>T_OpSubscriptArrRet &amp; rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::operator[]</definition>
        <argsstring>(T_Rhs &amp;&amp;rhs)</argsstring>
        <name>operator[]</name>
        <param>
          <type>T_Rhs &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="428" column="30" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a713a54b248f462704a77f0697d395e0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrlbox_1_1tainted__volatile" kindref="compound">T_OpDerefRet</ref> &amp;</type>
        <definition>T_OpDerefRet &amp; rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="437" column="23" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="437" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a4359f7609e90d48ea9d76d923f0baf7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrlbox_1_1tainted__volatile" kindref="compound">T_OpDerefRet</ref> &amp;</type>
        <definition>T_OpDerefRet &amp; rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="449" column="23" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a3e8fdb261d771cb7b5c9af33fe52ff35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="458" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="458" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a52c2403f1851a0e2d295a712d8d10029" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="468" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="468" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a05eaec33cccaad9bc15e014d6c25d695" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::operator!</definition>
        <argsstring>()</argsstring>
        <name>operator!</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="474" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="474" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a701759aedd637f48cc97a0e6ada1c8a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::copy_and_verify</definition>
        <argsstring>(T_Func verifier) const</argsstring>
        <name>copy_and_verify</name>
        <param>
          <type>T_Func</type>
          <declname>verifier</declname>
        </param>
        <briefdescription>
<para>Copy tainted value from sandbox and verify it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verifer</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to verify the copied value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Func</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the verifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whatever the verifier function returns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="503" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="503" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a76e49089d448ba0cfa7ef6d7c1e2d288" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::copy_and_verify_range</definition>
        <argsstring>(T_Func verifier, std::size_t count) const</argsstring>
        <name>copy_and_verify_range</name>
        <param>
          <type>T_Func</type>
          <declname>verifier</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Copy a range of tainted values from sandbox and verify them. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verifer</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to verify the copied value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Func</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the verifier. If the tainted type is <computeroutput>int*</computeroutput> then <computeroutput>T_Func = T_Ret(*)(unique_ptr&lt;int[]&gt;)</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whatever the verifier function returns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="638" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="638" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1aa377cc4d0ea6768ada5032234ac89aab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::copy_and_verify_string</definition>
        <argsstring>(T_Func verifier) const</argsstring>
        <name>copy_and_verify_string</name>
        <param>
          <type>T_Func</type>
          <declname>verifier</declname>
        </param>
        <briefdescription>
<para>Copy a tainted string from sandbox and verify it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verifer</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to verify the copied value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Func</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the verifier either <computeroutput>T_Ret(*)(unique_ptr&lt;char[]&gt;)</computeroutput> or <computeroutput>T_Ret(*)(std::string)</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whatever the verifier function returns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="662" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="662" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1ad34419b3444d0bf37e25ecf7d37fbe0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::copy_and_verify_address</definition>
        <argsstring>(T_Func verifier)</argsstring>
        <name>copy_and_verify_address</name>
        <param>
          <type>T_Func</type>
          <declname>verifier</declname>
        </param>
        <briefdescription>
<para>Copy a tainted pointer from sandbox and verify the address. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is useful if you need to verify physical bits representing the address of a pointer. Other APIs such as copy_and_verify performs a deep copy and changes the address bits.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to verify the copied value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Func</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the verifier <computeroutput>T_Ret(*)(uintptr_t)</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whatever the verifier function returns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="731" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="731" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a4f739a0994af23036cce2d06b10953ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::copy_and_verify_buffer_address</definition>
        <argsstring>(T_Func verifier, std::size_t size)</argsstring>
        <name>copy_and_verify_buffer_address</name>
        <param>
          <type>T_Func</type>
          <declname>verifier</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Copy a tainted pointer to a buffer from sandbox and verify the address. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is useful if you need to verify physical bits representing the address of a buffer. Other APIs such as copy_and_verify performs a deep copy and changes the address bits.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to verify the copied value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. Buffer with length size is expected to fit inside sandbox memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Func</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the verifier <computeroutput>T_Ret(*)(uintptr_t)</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whatever the verifier function returns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="754" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="754" bodyend="760"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1a5240ac6ca84190c2a13e594b3882d704" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>const void *</type>
        <definition>const void * rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::verify_range_helper</definition>
        <argsstring>(std::size_t count) const</argsstring>
        <name>verify_range_helper</name>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="587" column="21" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="587" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1tainted__base__impl_1aa27f5d03fb3c8552d03f20d6164e877c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T_CopyAndVerifyRangeEl[]&gt;</type>
        <definition>std::unique_ptr&lt; T_CopyAndVerifyRangeEl[]&gt; rlbox::tainted_base_impl&lt; T_Wrap, T, T_Sbx &gt;::copy_and_verify_range_helper</definition>
        <argsstring>(std::size_t count) const</argsstring>
        <name>copy_and_verify_range_helper</name>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="608" column="26" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="608" bodyend="625"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" line="27" column="1" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox.hpp" bodystart="28" bodyend="761"/>
    <listofallmembers>
      <member refid="classrlbox_1_1tainted__base__impl_1ac13751ef39495b930584164f841c540d" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>BinaryOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a03f7e6cbb4ac6cc48b5f523c69863fee" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>BinaryOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a100c45337a0ad48eb18ac977edb8cc48" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>BinaryOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a19409368320571c2d44e5b41620fbe93" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>BinaryOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ac11254da0346088f7e2ccfdccf87deb1" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>BinaryOpValAndPtr</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ab64e73357c9a9387ca281d31e17bc490" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>BinaryOpValAndPtr</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a950a68721c252366df818c0cbf4da4c6" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>BooleanBinaryOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a257ae6c0b4a0fe1b1639044a572a038b" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompareOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a3d04a736a337294fc02a13baef2d78db" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompareOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ac91498bde8eb4e3a384c666a65d5e7c0" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompareOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a2665ce9ccc644be5556c05fb26470468" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompareOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a461a58872313be13c882039a4d286145" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompareOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1af85745a199b95587d0d750439fae25bd" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompareOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a15ced8f568f8899e55b6354f620cbc7c" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompoundAssignmentOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a254df7254438c313621ff1a689dd5c34" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompoundAssignmentOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a80fe4331b06226cf5e5187cf806a36e5" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompoundAssignmentOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a695650ceddb22aee9f17b290e721dbd8" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompoundAssignmentOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ac234712a7d68b938c9c2f34bd4f96d73" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompoundAssignmentOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a9d9190fa8cfeadd75e5352a050b021d2" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>CompoundAssignmentOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a701759aedd637f48cc97a0e6ada1c8a6" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>copy_and_verify</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ad34419b3444d0bf37e25ecf7d37fbe0b" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>copy_and_verify_address</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a4f739a0994af23036cce2d06b10953ee" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>copy_and_verify_buffer_address</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a76e49089d448ba0cfa7ef6d7c1e2d288" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>copy_and_verify_range</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1aa27f5d03fb3c8552d03f20d6164e877c" prot="private" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>copy_and_verify_range_helper</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1aa377cc4d0ea6768ada5032234ac89aab" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>copy_and_verify_string</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a66385fce7ba1bd883b74d887f1028917" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>impl</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1abf804eac041d98eff1686fcb03d0a73c" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>impl</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1afd3ea6da54b1556e0bdfd222df1ed2e9" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>INTERNAL_unverified_safe</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1aadcc0f6dc4114d5c9ebecff33040c3c7" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>INTERNAL_unverified_safe</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a05eaec33cccaad9bc15e014d6c25d695" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>operator!</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a713a54b248f462704a77f0697d395e0c" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>operator*</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a4359f7609e90d48ea9d76d923f0baf7c" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>operator*</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a3e8fdb261d771cb7b5c9af33fe52ff35" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>operator-&gt;</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a52c2403f1851a0e2d295a712d8d10029" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>operator-&gt;</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a0867903c2ba81b50c85f142682ef1c0c" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>operator[]</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ae684874ca4a58d905b827bcd885a5877" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>operator[]</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a2ccdf93dd8466df3985c4f7c9225af08" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>PostIncDecOps</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a091f18be8cd32b34bec75322364e1f1d" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>PostIncDecOps</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a6c8dca7aef6cbf28dec6cba42963e76a" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>PreIncDecOps</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ab9decc76ea24942932c7288d2ee257c3" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>PreIncDecOps</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ac7d2f71a8fc72b922bfa1260d4a7ac94" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>rlbox_detail_member_and_const</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1af9767a70f0e97d74c5d70a6511cff5d1" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>rlbox_detail_member_and_const</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ac70f724530042010d1366ab44ae6117a" prot="private" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>T_CopyAndVerifyRangeEl</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ab367db1429d5326c9684d2eef6364fa9" prot="private" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>T_OpDerefRet</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1af9ac82d1c1266df3f280f8b53c2ea815" prot="private" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>T_OpSubscriptArrRet</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ac450c85ec8fa3c5046bcf3fb7aeca2d1" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>UnaryOp</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1ae2c69129cbb9344e7d2623129f031214" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>UNSAFE_sandboxed</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a2fb81eab8dc3839f351d6d89410c2350" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>UNSAFE_sandboxed</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a01acab6b4bd8137afa03cf4b2678844f" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>UNSAFE_unverified</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a41f8eed43072bf173cce34cd3351191e" prot="public" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>UNSAFE_unverified</name></member>
      <member refid="classrlbox_1_1tainted__base__impl_1a5240ac6ca84190c2a13e594b3882d704" prot="private" virt="non-virtual"><scope>rlbox::tainted_base_impl</scope><name>verify_range_helper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
