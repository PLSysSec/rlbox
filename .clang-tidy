# Checks removed from clang-tidy
#
# altera-*,llvm-libc-* --- don't apply in our context
# bugprone-macro-parentheses --- high false positive rate. False positive in RLBOX_DEFINE_BASE_TYPES_FOR
# bugprone-suspicious-include --- we sometimes include .cpp files for convenience in this project
# clang-diagnostic-gnu-zero-variadic-macro-arguments --- we need this for sandbox_invoke
# cppcoreguidelines-macro-usage --- we need macros in rlbox to ensure we don't additional overheads for things like function calls and symbol resolution
# cppcoreguidelines-pro-bounds-pointer-arithmetic --- we need to support pointer arithmetic in wrapper types
# cppcoreguidelines-pro-type-reinterpret-cast --- we will be using reinterpret_cast to handle the ABI differences
# cppcoreguidelines-owning-memory --- we need mallocs for implementing malloc_in_sandbox in tests
# cppcoreguidelines-non-private-member-variables-in-classes,misc-non-private-member-variables-in-classes --- need protected members
# cppcoreguidelines-no-malloc,hicpp-no-malloc --- we need mallocs for implementing malloc_in_sandbox in tests
# cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers --- test cases use magic numbers. Not worth checking for.
# cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays --- we use c arrays in rlbox headers so we can support this in the ffi
# cppcoreguidelines-pro-type-vararg,hicpp-vararg --- false positives for varargs
# hicpp-deprecated-headers,modernize-deprecated-headers --- we can safely use stdint.h etc
# hicpp-explicit-conversions,google-explicit-constructor --- we want to support explicit conversions to make the syntax reasonable
# hicpp-use-nullptr, modernize-use-nullptr --- tainted wrappers represent pointers as ints sometimes, using 0 vs nullptr is more convenient
# modernize-use-trailing-return-type --- stylistic choice to avoid this
# fuchsia-default-arguments-calls --- this is not a useful check in this codebase
# fuchsia-overloaded-operator --- we explicitly need this in tainted types
# llvm-header-guard --- we use pragma once in this project
# llvm-namespace-comment, google-readability-namespace-comments --- we don't really use deeply nested namespaces, so this is not necessary
# google-runtime-int - need to use int long etc to handle ABI differences
# google-build-using-namespace --- we want "using namespace rlbox" in the tests
# google-runtime-operator --- we need to overload address-of operators in tainted_volatile
# performance-no-int-to-ptr --- we need to use this to deal with converting abis
# readability-convert-member-functions-to-static --- hampers development of abstract APIs
# readability-identifier-length --- unnecessary for test code
# readability-const-return-type --- too many cases where we have to remove consts in return. Easier just to ignore this.
#
Checks: '*,-altera-*,-llvmlibc-*,-bugprone-macro-parentheses,-bugprone-suspicious-include,-clang-diagnostic-gnu-zero-variadic-macro-arguments,-cppcoreguidelines-macro-usage,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-cppcoreguidelines-pro-type-reinterpret-cast,-cppcoreguidelines-owning-memory,-cppcoreguidelines-non-private-member-variables-in-classes,-misc-non-private-member-variables-in-classes,-cppcoreguidelines-no-malloc,-hicpp-no-malloc,-cppcoreguidelines-avoid-magic-numbers,-readability-magic-numbers,-cppcoreguidelines-avoid-c-arrays,-hicpp-avoid-c-arrays,-hicpp-explicit-conversions,-hicpp-use-nullptr,-modernize-use-nullptr,-google-explicit-constructor,-fuchsia-default-arguments-calls,-fuchsia-overloaded-operator,-modernize-avoid-c-arrays,-cppcoreguidelines-pro-type-vararg,-hicpp-vararg,-hicpp-deprecated-headers,-modernize-use-trailing-return-type,-llvm-header-guard,-llvm-namespace-comment,-google-readability-namespace-comments,-modernize-deprecated-headers,-google-build-using-namespace,-google-runtime-int,-google-runtime-operator,-performance-no-int-to-ptr,-readability-convert-member-functions-to-static,-readability-identifier-length,-readability-const-return-type'
HeaderFilterRegex: '.*rlbox[a-zA-Z0-9_]*\.hpp'
WarningsAsErrors: 'readability-identifier-naming'
CheckOptions:
  - { key: readability-function-cognitive-complexity.Threshold,          value: 100                       }
  - { key: readability-identifier-naming.NamespaceCase,                  value: lower_case                }
  - { key: readability-identifier-naming.GlobalVariableCase,             value: CamelCase                 }
  - { key: readability-identifier-naming.GlobalVariablePrefix,           value: g                         }
  - { key: readability-identifier-naming.GlobalVariableIgnoredRegexp,    value: (has_.*)|(is_.*)|(.*_v)   }
  - { key: readability-identifier-naming.ClassCase,                      value: lower_case                }
  - { key: readability-identifier-naming.StructCase,                     value: lower_case                }
  - { key: readability-identifier-naming.EnumCase,                       value: lower_case                }
  - { key: readability-identifier-naming.EnumConstantCase,               value: UPPER_CASE                }
  - { key: readability-identifier-naming.ClassMemberCase,                value: CamelCase                 }
  - { key: readability-identifier-naming.ClassMemberPrefix,              value: m                         }
  - { key: readability-identifier-naming.FunctionCase,                   value: lower_case                }
  - { key: readability-identifier-naming.FunctionIgnoredRegexp,          value: (UNSAFE_.*)|(INTERNAL_.*) }
  - { key: readability-identifier-naming.ParameterCase,                  value: CamelCase                 }
  - { key: readability-identifier-naming.ParameterPrefix,                value: a                         }
  - { key: readability-identifier-naming.TemplateParameterCase,          value: CamelCase                 }
  - { key: readability-identifier-naming.TemplateParameterPrefix,        value: T                         }
  - { key: readability-identifier-naming.TemplateParameterIgnoredRegexp, value: T                         }
  - { key: readability-identifier-naming.VariableCase,                   value: lower_case                }